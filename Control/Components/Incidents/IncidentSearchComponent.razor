@using CsvHelper.Configuration
@using Entities;
@using Business;
@using System.IO
@using System.Globalization

@inject IJSRuntime Js;

<div>
    <div class="form-group row">
        <div class="col">
                <input type="text" @bind="DeviceIdToSearch" list="devicesInDB" class="rounded form-control" placeholder="Serie" />
                <datalist id="devicesInDB">
                    @foreach (var dictItem in devices)
                   {
                       <option value="@dictItem.Key">@dictItem.Value</option>
                   }
                </datalist>
        </div>
        <div class="col">
                <input type="text" @bind="AliasToSearch" class="rounded form-control" placeholder="Alias" />
        </div>
        <div class="col">
                <select class="rounded form-control" @bind="YearToSearch">
                    @foreach (var item in Years)
                    {
                        <option value="@item">@item</option>
                    }
                </select>
        </div>
    </div>
        <div class="form-group row">
            <div class="col">
                <input class="btn-outline-dark form-control" type="button" value="Buscar" @onclick="Search" />
            </div>
            <div class="col">
                <input class="btn-outline-dark form-control" type="button" value="Limpiar" @onclick="Clean" />
            </div>
            <AuthorizeView Roles="Administrador,Editor">
                <Authorized >
                    <div class="col">
                        <input class="btn-outline-dark form-control" type="button" value="Exportar" @onclick="Download"/>
                    </div>       
                </Authorized>
            </AuthorizeView>

    </div>
    <p class="text-danger">@Message</p>
</div>

<table class="table table-hover table-striped table-responsive-sm ">
    <thead>
        <tr>
            <th>Numéro de serie</th>
            <th>Alias</th>
            <th>Cliente</th>
            <th>Día del Reporte</th>
            <th>Encargado</th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var obj in Incidents)
        {
        <tr>
            <td>@obj.DeviceId</td>
            <td>@obj.Device.Alias</td>
            <td>@obj.Device.Client.Name</td>
            <td>@obj.ReportDate</td>
            <td>@obj.Technician.TechnicianName</td>
            <td><a href="incident/view/@obj.IncidentId" >Ver</a></td>
            <td><a href="incident/update/@obj.IncidentId">Editar</a></td>
            <td><a  style="color:red" href="incident/delete/@obj.IncidentId">Eliminar</a></td>
        </tr> 
        }
    </tbody>
</table>


@code{
    string DeviceIdToSearch = null;
    string AliasToSearch = null;
    int YearToSearch = 0;
    Dictionary<string, string> devices = new Dictionary<string, string>();
    string Message = "";

    List<IncidentEntity> Incidents = new List<IncidentEntity>();

    List<int> Years = new List<int>();



    protected override async Task OnInitializedAsync()
    {
        Years = B_Incident.GetIncidentsByYears().ToList();
        devices = B_Device.GetDictonaryOfDevicesWithClient();
        base.OnInitializedAsync();   

    }

    private void Search()
    {
        var tmpList= new List<IncidentEntity>();
        if(YearToSearch != 0)
        {
            tmpList = B_Incident.SearchIncidents(DeviceIdToSearch, AliasToSearch, YearToSearch.ToString());    
        }
        else
        {
            tmpList = B_Incident.SearchIncidents(DeviceIdToSearch, AliasToSearch, null);    
        }
        try
        {
            if(tmpList.Count != 0)
            {
                Incidents = tmpList;
                Message = "";
            }
            else
            {
                Message = $"No hay resultados de la busqueda";
            }
        }
        catch (Exception f)
        {        
            Message = $"No hay resultados de la busqueda";   
        }



    }



    private void Clean()
    {
        DeviceIdToSearch = null;
        AliasToSearch = null;
        YearToSearch = 0;
        Message = "";
    }
   

    private void Download()
    {
        using( var memoryStream= new MemoryStream())
        {
            using( var writter = new StreamWriter(memoryStream))
            {
                var config = new CsvConfiguration(CultureInfo.InvariantCulture)
                {
                    NewLine = Environment.NewLine,
                };
                
                using(var csv = new CsvWriter(writter,config))
                {
                    var arr1 = Incidents.ToArray();
                    csv.WriteRecords(arr1);
                }
                var arr = memoryStream.ToArray();
                Js.SaveAs("DevicesConsult.csv", arr);
            }
        }
    }



}