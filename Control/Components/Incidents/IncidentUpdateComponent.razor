@using Entities;
@using Business;
@inject NavigationManager Nav;
@inject AuthenticationStateProvider authStateProvider
@inject IJSRuntime JS
@inject IToastService toastService


<EditForm Model="oIncident">
    <div class="form-group">
        <label>Fecha del Reporte del cliente</label>
        <InputDate class="form-control" @bind-Value="oIncident.ReportDate"></InputDate>
    </div>
    <div class="form-group">
        <label>Fecha del Incidente</label>
        <InputDate class="form-control" @bind-Value="oIncident.IncidentDate"></InputDate>
    </div>
    <div class="form-group">
        <label>Fecha de revisión</label>
        <InputDate class="form-control" @bind-Value="oIncident.RevisionDate"></InputDate>
    </div>
    <div class="form-group">
        <label>Fecha envio reporte</label>
        <InputDate class="form-control" @bind-Value="oIncident.SendReportDate"></InputDate>
    </div>
    <div class="form-group">
        <label>Descripción del Reporte del cliente</label>
        <InputTextArea class="form-control" @bind-Value="oIncident.ReportDescripcion"></InputTextArea>
    </div>
    <div class="form-group">
        <label>Información de la revisión</label>
        <InputTextArea class="form-control" @bind-Value="oIncident.RevisionInformation"></InputTextArea>
    </div>
    <div class="form-group">
        <label>Estatus del dispositivo RAYOS-NO</label>
        <InputTextArea class="form-control" @bind-Value="oIncident.DDCEStatus"></InputTextArea>
    </div>
    <div class="form-group">
        <label>Recomendaciones </label>
        <InputTextArea class="form-control" @bind-Value="oIncident.Recomentations"></InputTextArea>
    </div>
    <div class="form-group">
        <label>Contacto del cliente</label>
        <InputText class="form-control" @bind-Value="oIncident.Recomentations"></InputText>
    </div>
    <div class="form-group">
        <label><strong>Ténico encargado</strong></label>
        <InputSelect @bind-Value="oIncident.TechnicianId" class="form-control">
            <option value="">Seleccione un Técnico...</option>
            @foreach (var obj in technicians)
            {
                <option value="@obj.TechnicianId">@obj.TechnicianName</option>
            }
        </InputSelect>
        <p><i>Nombre de la persona que realizó la visita.</i></p>
    </div>
    <div class="form-group">
        <label>Esta Finalizado?</label>
        <InputCheckbox class="form-control" @bind-Value="oIncident.IsClosed"></InputCheckbox>
    </div>
    <div class="form-group">
        <label>Numero de serie</label>
        <input type="text" @bind="@oIncident.DeviceId" list="listaEquipos" class="form-control" placeholder="Numero de serie">
        <datalist id="listaEquipos">
            <option value="">Seleccione un equipo...</option>
            @foreach (var obj in Devices)
            {
                <option value="@obj.DeviceId">@obj.Client.Name - @obj.DeviceId </option>
            }
        </datalist>  
    </div>
</EditForm>
<div>
    <input type="button" value="Actualizar Incidente" @onclick="UpdateIncident" />
</div>



@code{
    [Parameter]
    public string IncidentId { get; set; }

    string Message = "";

    IncidentEntity oIncident = new IncidentEntity();
    List<DeviceEntity> Devices = new List<DeviceEntity>();
    List<TechnicianEntity> technicians = new List<TechnicianEntity>(); 

    protected override async Task OnInitializedAsync()
    {
        Devices = B_Device.ListOfDevices().OrderBy(D => D.ClientId).ToList();
        oIncident = B_Incident.GetIncidentById(IncidentId);
        technicians = B_Technician.GetListOftechnicians();
    }
    private async Task UpdateIncident()
    {
        try
        {            
            oIncident.Device = Devices.First(D => D.DeviceId == oIncident.DeviceId);
            var lasEditor = await authStateProvider.GetAuthenticationStateAsync();
            oIncident.lastEditor = lasEditor.User.Identity.Name;
            oIncident.lastEdition = DateTime.Today;
            B_Incident.Update(oIncident);
            Nav.NavigateTo("incident/list");        
        }
        catch(Exception g)
        {
            Message = $"Error: {g.Message}";
            toastService.ShowError(Message, "Error interno");

        }
    
    }

}   