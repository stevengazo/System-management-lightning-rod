@using CsvHelper.Configuration
@using Entities;
@using Business;
@using System.IO;
@using CsvHelper;
@using System.Globalization;
@using System;

@inject IJSRuntime Js;




<div class="form-group row">
    <div class="col">
        <input class="form-control rounded" type="text" list="DicDevices" @bind="IDToSearch" placeholder="Numero de Serie" />
        <datalist id="DicDevices">
            @foreach (var rowDic in dicDevices)
            {
                <option value="@rowDic.Key">@rowDic.Value</option>
            }
        </datalist>
    </div>
    <div class="col">
        <input type="button" value="Buscar" class="btn btn-outline-dark form-control"  @onclick="Search" />    
    </div>
    <div class="col">
        <input type="button" value="Limpiar" class="btn btn-outline-dark form-control" @onclick="CleanValues" />
    </div>
    <div class="col">
        <input type="button" value="Exportar" class="btn btn-outline-dark form-control" @onclick="Download" />
    </div>
</div>

<p class="text-center" style="color:red"> @ErrorMessage</p>

<table class="table table-hover table-striped table-responsive-sm ">
    <thead>
        <tr>
            <th>Id de Referencia</th>
            <th>Numero de serie reemplazado</th>
            <th>Numero de serie nuevo</th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var obj in Replacements)
        {
            <tr>
                <td>@obj.ReplacementDeviceId</td>
                <td>@obj.DeviceId</td>
                <td>@obj.NewSerieDevice</td>
                <td><a class="btn btn-primary" href="/replacement/view/@obj.ReplacementDeviceId.ToString()">Ver</a></td>
                <td><a class="btn btn-secondary" href="/replacement/update/@obj.ReplacementDeviceId.ToString()">Editar</a></td>
                <td><a class="btn btn-danger" href="">Eliminar</a></td>
            </tr>
        }
    </tbody>
</table>


@code{
    List<ReplacementDeviceEntity> Replacements = new List<ReplacementDeviceEntity>();
    Dictionary<string, string> dicDevices = new Dictionary<string, string>();
    string IDToSearch = null;
    string ErrorMessage = null;

    protected override  async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        dicDevices = B_Device.GetDictonaryOfDevicesWithClient();
    }

    private void CleanValues()
    {
        IDToSearch = null;
    }

    private void Search()
    {
        try
        {
            if (IDToSearch != null)
            {
                Replacements = B_Replacement.ConsultReplacements(IDToSearch.ToString());
                ErrorMessage = "";
            }
            else
            {
                ErrorMessage = "No hay coincidencias en la base de datos";
            }
        }
        catch (Exception c)
        {
            ErrorMessage = c.Message;
        }
    }


    private async Task Download()   
    {
        using( var memoryStream= new MemoryStream())
        {
            using( var writter = new StreamWriter(memoryStream))
            {
                var config = new CsvConfiguration(CultureInfo.InvariantCulture)
                {
                    NewLine = Environment.NewLine,
                };

                using(var csv = new CsvWriter(writter,config))
                {
                    var arr1 = Replacements.ToArray();
                    csv.WriteRecords(arr1);
                }
                var arr = memoryStream.ToArray();
                Js.SaveAs("DevicesConsult.csv", arr);
            }
        }
    }
}

 