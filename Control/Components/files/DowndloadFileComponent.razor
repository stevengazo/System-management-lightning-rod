@using Entities;
@using Business;
@using System.IO;
@using Microsoft.AspNetCore.Hosting;
@using Microsoft.Extensions.Logging;
@inject IWebHostEnvironment Environment
@inject IJSRuntime JS
@inject IToastService toastService


<button @onclick="@(()=>{  onclick();})" class="btn btn-info">
    Descargar
</button>

@if (FlagIsReady)
{
    <p>
        Listo Para descargar
    </p>
}

@code {
    [Parameter]
    public string type { get; set; }
    [Parameter]
    public string idObject { get; set; }
    [Parameter]
    public string nameFile { get; set; }

    private string localStorage = "";
    bool FlagIsReady = false;




    private async void onclick()
    {

        string pathFileNasFile = "";
        localStorage = Path.Combine(Environment.ContentRootPath, "tmpfiles");

        if (type != null && idObject != null && nameFile != null)
        {
            switch (type)
            {
                case "Warranty":
                    try
                    {

                        var ObjTemp = B_Warranty.WarrantyById(idObject);
                        pathFileNasFile = $"{ObjTemp.DeviceId}/{ObjTemp.DateSend.Year.ToString()}-Warranties/{ObjTemp.Id}";
                        //FlagIsReady = B_StorageManage.DownloadFile(nameFile, localStorage, pathFileNasFile);

                        var streamData = B_StorageManage.DownloadFile(nameFile, localStorage, pathFileNasFile);
                        toastService.ShowSuccess("Archivo Descargado", "Aviso");
                        await  DownloadFileFromStream(streamData);
                    }
                    catch (Exception f)
                    {
                        toastService.ShowError($"Error: {f.Message}");
                        Console.WriteLine(f.Message);
                    }


                    break;

                case "Maintenance":
                    try
                    {
                        var ObjTempMain = B_Maintenance.MaintenanceById(idObject);
                        pathFileNasFile = $"{ObjTempMain.DeviceId}/{ObjTempMain.MaintenanceDate.Year.ToString()}-Maintenances/{ObjTempMain.MaintenanceId}";
                        //FlagIsReady = B_StorageManage.DownloadFile(nameFile, localStorage, pathFileNasFile);

                        var streamData = B_StorageManage.DownloadFile(nameFile, localStorage, pathFileNasFile);
                     await   DownloadFileFromStream(streamData);
                                                toastService.ShowSuccess("Archivo Descargado", "Aviso");
                    }
                    catch (Exception f)
                    {
                        Console.WriteLine(f.Message);
                    }


                    break;
                case "Incident":
                    try
                    {
                        var objIncident = B_Incident.GetIncidentById(idObject);
                        pathFileNasFile = $"{objIncident.DeviceId}/{objIncident.IncidentDate.Year.ToString()}-Incidents/{objIncident.IncidentId}";
                        //FlagIsReady = B_StorageManage.DownloadFile(nameFile, localStorage, pathFileNasFile);

                        var streamData = B_StorageManage.DownloadFile(nameFile, localStorage, pathFileNasFile);
                    await     DownloadFileFromStream(streamData);
                                                toastService.ShowSuccess("Archivo Descargado", "Aviso");
                    }
                    catch (Exception f)
                    {
                        Console.WriteLine(f.Message);
                    }


                    break;
                default:
                    FlagIsReady = false;
                    break;
            }

        }
        else
        {
            FlagIsReady = false;
        }
    }


    private Stream GetFileStream()
    {
        return File.OpenRead($@"{localStorage}/{nameFile}");
    }

    private async Task DownloadFileFromStream(byte[] data = null)
    {
        if (data != null)
        {
            var fileStream = new MemoryStream(data);

            using var streamRef = new DotNetStreamReference(stream: fileStream);
            await JS.InvokeVoidAsync("downloadFileFromStream", nameFile, streamRef);

        }
        else
        {
            var fileStream = GetFileStream();
            var fileName = nameFile;

            using var streamRef = new DotNetStreamReference(stream: fileStream);

            await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
        }



    }


}
