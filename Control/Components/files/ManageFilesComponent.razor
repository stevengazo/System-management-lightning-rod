@using Entities;
@using Business;
@using System.Linq;
@using System.IO;
@using Microsoft.AspNetCore.Hosting;
@using Microsoft.Extensions.Logging;
@inject IWebHostEnvironment Environment
@inject NavigationManager nav
@inject IJSRuntime JS



<div class="d-flex flex-row justify-content-around">
    <!-- Añadir archivo -->
    <div>
        <div class="form-group d-flex flex-column justify-content-around align-items-center">
            <div>
            <p class="text-sm-left">
                Tamaño máximo de carga de @maxFileSize KB
            </p>
            </div>
            <div>
                <InputFile class="form-control form-control-file" OnChange="@LoadFiles" multiple />
            </div>
            <div>
                <button class="m-lg-1 btn btn-sm btn-outline-success" @onclick="@onClicked">Subir Archivos</button>
            </div>
            
        </div>
        <p>
            @errorMessage
        </p>



    </div>
    <!-- Tabla Contenidos -->
    <div>
        <table class="table table-sm table-light table-hover table-bordered">
            <thead>
                <tr>
                    <th>
                        Nombre
                    </th>
                    <th>
                        Tamaño
                    </th>
                    <th>
                        Acciones
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (Dictionary<string, string> item in itemList)
                {
                    <tr>
                        <td>
                            @item.GetValueOrDefault("Name")
                        </td>
                        <td>
                            @item.GetValueOrDefault("Size") KB
                        </td>
                        <td>
                            <DowndloadFileComponent type="@Type" idObject="@idObject" nameFile="@item.GetValueOrDefault("Name")" />
                        </td>
                        <td>
                            @if (true)
                            {
                                string name = item.GetValueOrDefault("Name");
                                <button class="btn btn-danger" @onclick="() =>onclickeddELETE(name) ">
                                    Borrar
                                </button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    [Parameter]
    public string idObject { get; set; }
    [Parameter]
    public string Type { get; set; }




    protected override async Task OnInitializedAsync()
    {
        await GetList();

        await base.OnInitializedAsync();
    }




    // GetList()
    List<Dictionary<string, string>> itemList = new List<Dictionary<string, string>>();

    private async Task GetList()
    {
        if (Type != null)
        {
            switch (Type)
            {
                case "Warranty":
                    var Object = B_Warranty.WarrantyById(idObject);
                    var path = $"{Object.DeviceId}/{Object.DateSend.Year.ToString()}-Warranty/{Object.Id}";
                    itemList = await B_StorageManage.GetListOfFiles(path);
                    break;
                case "Maintenance":
                    var ObjectMain = B_Maintenance.MaintenanceById(idObject);
                    var pathMain = $"{ObjectMain.DeviceId}/{ ObjectMain.MaintenanceDate.Year.ToString()}-Maintenance/{ObjectMain.MaintenanceId}";
                    itemList = await B_StorageManage.GetListOfFiles(pathMain);
                    break;
                case "Incident":
                    var ObjectInci = B_Incident.GetIncidentById(idObject);
                    var pathInci = $"{ObjectInci.DeviceId}/{ ObjectInci.IncidentDate.Year.ToString()}-Incident/{ObjectInci.IncidentId}";
                    itemList = await B_StorageManage.GetListOfFiles(pathInci);
                    break;
                default:
                    // code block
                    break;
            }

        }
    }

    /*INTERNAL VARIABLES*/
    private long maxFileSize = 1048576 * 5;
    private int maxAllowedFiles = 1;
    private string errorMessage = "";
    private string randomPath = "";

    private InputFileChangeEventArgs _Data = null;

    List<FileStream> fileStreams = new List<FileStream>();

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        _Data = e;
    }

    private async Task onClicked()
    {
        if (_Data != null)
        {
            try
            {
                var pathlocal = "";
                var filename = "";
                foreach (var file in _Data.GetMultipleFiles(maxAllowedFiles))
                {
                    var trustedFileName = Path.GetRandomFileName();
                    var pathAux = Path.Combine(Environment.ContentRootPath, "tmpfiles", file.Name);
                    filename = file.Name;
                    await using FileStream writeStream = new(pathAux, FileMode.Create);
                    using var readStream = file.OpenReadStream(maxFileSize);
                    var bytesRead = 0;
                    var totalRead = 0;
                    var buffer = new byte[maxFileSize];

                    while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
                    {
                        totalRead += bytesRead;

                        await writeStream.WriteAsync(buffer, 0, bytesRead);

                        StateHasChanged();
                    }
                    pathlocal = pathAux;
                }

                string pathFileNas = "";
                switch (Type)
                {
                    case "Warranty":
                        var tmpObject = B_Warranty.WarrantyById(idObject);
                        pathFileNas = $"{tmpObject.DeviceId}/{tmpObject.DateSend.Year.ToString()}-Warranty/{tmpObject.Id}/{filename}";
                        break;
                    case "Maintenance":
                        var maintenance = B_Maintenance.MaintenanceById(idObject);
                        pathFileNas = $"{maintenance.DeviceId}/{maintenance.MaintenanceDate.Year.ToString()}-Maintenance/{maintenance.MaintenanceId}/{filename}";
                        break;
                    case "Incident":
                        var Incident = B_Incident.GetIncidentById(idObject);
                        pathFileNas = $"{Incident.DeviceId}/{Incident.IncidentDate.Year.ToString()}-Incident/{Incident.IncidentId}/{filename}";
                        break;
                    default:
                        break;
                }

                B_StorageManage.uploadFIle(pathlocal, pathFileNas);
                File.Delete(pathlocal);
                //errorMessage = "Archivo Cargado, favor refresque la pagina";
                await GetList();
            }
            catch (Exception f)
            {
                Console.WriteLine(f.Message);
                errorMessage = f.Message;
            }
        }
        else
        {
            errorMessage = "No hay datos cargados";
        }
    }



    /* DELETE FILE*/
    private bool isDeleted = false;


    private void onclickeddELETE(string nameFile)
    {

        isDeleted = !isDeleted;
        try
        {
            var tmpPath = "";
            switch (Type)
            {
                case "Warranty":
                    var tmpOBject = B_Warranty.WarrantyById(idObject);
                    tmpPath = $"{tmpOBject.DeviceId}/{tmpOBject.DateSend.Year.ToString()}-Warranty/{tmpOBject.Id}";
                    break;
                case "Maintenance":
                    var tmpOBjectMain =  B_Maintenance.MaintenanceById(idObject);
                    tmpPath = $"{tmpOBjectMain.DeviceId}/{tmpOBjectMain.MaintenanceDate.Year.ToString()}-Maintenance/{tmpOBjectMain.MaintenanceId}";
                    break;
                case "Incident":
                    var tmpOBjecInci =  B_Incident.GetIncidentById(idObject);
                    tmpPath = $"{tmpOBjecInci.DeviceId}/{tmpOBjecInci.IncidentDate.Year.ToString()}-Incident/{tmpOBjecInci.IncidentId}";
                    break;
                default:
                    break;
            }
            isDeleted = B_StorageManage.DeleteFile(tmpPath, nameFile);
            GetList();
        }
        catch (Exception r)
        {
            Console.WriteLine(r.Message);
        }
    }



}
