@using System ;
@using System.IO;
@using Microsoft.AspNetCore.Hosting;
@using Microsoft.Extensions.Logging;
@inject IWebHostEnvironment Environment

@using Business;
@using Entities;

<label>
    Agregar nuevo archivo
</label>
<div class="form-group d-flex flex-sm-row justify-content-around align-items-center">
    <p>
        Tamaño máximo de carga de @maxFileSize KB (@(maxAllowedFiles/1024) MG) 
    </p>
    <InputFile class="form-control form-control-file" OnChange="@LoadFiles" multiple />
    <button  class="m-lg-1 btn btn-sm btn-light" >Subir Archivos</button>
</div>

@if (isLoading)
{
    <p>Uploading...</p>
}
<p>
    @errorMessage
</p>


<p>
    ruta 
    @randomPath
</p>


@code {
    [Parameter]
    public string type { get; set; }
    [Parameter]
    public string idObject { get; set; }


    private long maxFileSize = 1048576 * 5;
    private int maxAllowedFiles = 1;
    private bool isLoading = false;
    private string errorMessage = "";
    private string randomPath = "";

    List<FileStream> fileStreams = new List<FileStream>();



    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            var pathlocal = "";
            var filename = "";
            foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
            {
                var trustedFileName = Path.GetRandomFileName();
                var pathAux = Path.Combine(Environment.ContentRootPath, "tmpfiles", file.Name);
                filename = file.Name;
                await using FileStream writeStream = new(pathAux, FileMode.Create);
                using var readStream = file.OpenReadStream(maxFileSize);
                var bytesRead = 0;
                var totalRead = 0;
                var buffer = new byte[maxFileSize];

                while ((bytesRead = await readStream.ReadAsync(buffer)) != 0)
                {
                    totalRead += bytesRead;

                    await writeStream.WriteAsync(buffer, 0, bytesRead);               

                    StateHasChanged();
                }
                pathlocal = pathAux;
            }
            var tmpObject = B_Warranty.WarrantyById(idObject);
            string pathFileNas = $"{tmpObject.DeviceId}/{tmpObject.DateSend.Year.ToString()}-Warranty/{tmpObject.Id}/{filename}";
            B_StorageManage.uploadFIle(pathlocal, pathFileNas);
            File.Delete(pathlocal);

        }catch (Exception f)
        {
            Console.WriteLine(f.Message);
        }

    }

   
}

