@using CsvHelper.Configuration
@using Entities;
@using Business;
@using System.IO;
@using CsvHelper;
@using System.Globalization;
@using System;

@inject IJSRuntime Js;


<div>
    <div class="form-group row">
        <div class="col">
            <input type="text" @bind="DeviceIdToSearch" class="rounded form-control" placeholder="Serie" />
        </div>
        <div class="col">
            <input type="text" @bind="AliasToSearch" class="rounded form-control" placeholder="Alias de Equipo" />
        </div>
    </div>
    <div class="form-group row">
        <div class="col-6">
            <select class="rounded form-control" @bind="YearToSearch">
                <option value="">Año...</option>
                @foreach (var item in Years)
                {
                    <option value="@item">@item</option>
                }
            </select>
        </div>
        <div class="col-6">
            <select class="rounded form-control" @bind="CountryToSearch">
                <option value="">Pais...</option>
                @foreach (var item in Countries)
                {
                    <option value="@item.CountryId">@item.CountryName</option>
                }
            </select>
        </div>
    </div>
    <div class="form-group row">
        <div class="col">
            <input class="btn-outline-dark form-control" type="button" value="Buscar" @onclick="Search" />
        </div>
        <div class="col">
            <input class="btn-outline-dark form-control" type="button" value="Limpiar" @onclick="Clean" />
        </div>
        <AuthorizeView Roles="Administrador,Editor">
            <Authorized >
                <Animate Animation="Animations.FadeRight" Duration="TimeSpan.FromSeconds(0.1)" Delay="TimeSpan.FromSeconds(0)">
                <div class="col">
                    <input class="btn-outline-dark form-control" type="button" value="Exportar" @onclick="Download"/>
                </div>
            </Animate>
            </Authorized>
        </AuthorizeView>
        
        <div class="col-1" >
            <button  @onclick="changeHidden" class="btn btn-outline-light border-info">
                <span class="oi oi-info" aria-hidden="true"  ></span> 
            </button>            
        </div>
    </div>
    <p class="text-center" style="color:red"> @ErrorMessage</p>
</div>

<hr />


<div  hidden="@_bandHidden" class="flex-column">
    <p>Los equipos poseen las siguientes clasificaciones:</p>
    <div>
            <label >
                <strike>Inactivo</strike>
            </label>
      
            <label style="color:red;">
                <strike>Reemplazado</strike>
            </label>
     
            <label style="color:orange;">
                Fecha Limite Mantenimiento cercana
            </label>             
    </div>
    
    
    
</div>

<div>
    <table class="table table-borderless table-hover table-striped table-responsive-sm ">
        <thead>
            <tr>
                <th @onclick="handleIdOrder" > Numero de Serie </th>
                <th @onclick="handleAliasOrder"   > Alias</th>
                <th @onclick="handleDateOrder"  > Fecha de Instalación</th>
                <th @onclick="handleSaleOrder"  > Vendedor</th>
                <th @onclick="handleClientOrder"> Cliente</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var obj in Devices)
            {
                <tr class="align-middle">   
                @if(obj.IsActive == false && obj.IsReplaced == true )
                {
                        <td style="color:red;" ><strike> @obj.DeviceId</strike></td>
                        <td style="color:red;"><strike> @obj.Alias</strike></td>
                        <td style="color:red;"><strike> @obj.InstallationDate.Date.ToShortDateString()</strike></td>
                        <td style="color:red;"><strike> @obj.SaleMan.Name</strike></td>
                        <td style="color:red;"><strike> @obj.Client.Name</strike></td>


                }
                else if(obj.IsActive == false && obj.IsReplaced != true )
                {
                    
                    <td><strike> @obj.DeviceId</strike></td>
                    <td><strike> @obj.Alias</strike></td>
                    <td><strike> @obj.InstallationDate.Date.ToShortDateString()</strike></td>
                    <td><strike> @obj.SaleMan.Name</strike></td>
                    <td><strike> @obj.Client.Name</strike></td>
                }
                else if( checkDate(@obj.RecomendedDateOfMaintenance) )
                {
                    <td style="color:orange;"> @obj.DeviceId</td>
                    <td style="color:orange;"> @obj.Alias</td>
                    <td style="color:orange;"> @obj.InstallationDate.Date.ToShortDateString()</td>
                    <td style="color:orange;"> @obj.SaleMan.Name</td>
                    <td style="color:orange;"> @obj.Client.Name</td>
                }
                else 
                {                                  
                    <td  > @obj.DeviceId</td>
                    <td > @obj.Alias</td>
                    <td > @obj.InstallationDate.Date.ToShortDateString()</td>
                    <td > @obj.SaleMan.Name</td>
                    <td > @obj.Client.Name</td>
                }  
                <td> <a class="btn btn-primary" href="device/view/@obj.DeviceId"> Ver </a></td>
                <td> <a class="btn btn-secondary" href="device/update/@obj.DeviceId"> Modificar</a></td>
                <td> <a class="btn btn-danger" href="device/delete/@obj.DeviceId"> Eliminar</a></td>
                </tr>
            }
        </tbody>
    </table>
</div>






@code {
    #region Public Parametres


    #endregion

    #region Internal Parametres
    /// Seach Variables

    public string CountryToSearch { get; set; }

    public int YearToSearch { get; set; }

    public string AliasToSearch { get; set; }

    public string DeviceIdToSearch { get; set; }

    public string ErrorMessage { get; set; }

    public bool flagOrder = false;

    /// Internal Variables
    string _hidden;
    bool _bandHidden = true;

    List<int> Years = B_Device.ListOfYears();
    List<DeviceEntity> Devices = new List<DeviceEntity>();
    List<CountryEntity> Countries = new List<CountryEntity>();

    #endregion

    #region Methods

    private void Clean()
    {
        CountryToSearch = null;
        YearToSearch = 0;
        AliasToSearch = null;
        DeviceIdToSearch = null;
        _bandHidden = true;
    }


    private void handleClientOrder()
    {
      if(Devices.Count!= 0)
        {
            if (flagOrder)
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.Client.Name ascending
                           select devi).ToList();
            }
            else
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.Client.Name descending
                           select devi).ToList();
            }    
        }          
    }
    private void handleSaleOrder()
    {
      if(Devices.Count!= 0)
        {
            if (flagOrder)
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.SaleMan.Name ascending
                           select devi).ToList();
            }
            else
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.SaleMan.Name descending
                           select devi).ToList();
            }    
        }          
    }

    private void handleAliasOrder()
    {
        if(Devices.Count!= 0)
        {
            if (flagOrder)
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.Alias ascending
                           select devi).ToList();
            }
            else
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.Alias descending
                           select devi).ToList();
            }    
        }        
    }


    private void handleDateOrder()
    {
        if(Devices.Count!= 0)
        {
            if (flagOrder)
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.InstallationDate ascending
                           select devi).ToList();
            }
            else
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.InstallationDate descending
                           select devi).ToList();
            }    
        }               
    }
    private void handleIdOrder()
    {
        if(Devices.Count!= 0)
        {
            if (flagOrder)
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.DeviceId ascending
                           select devi).ToList();
            }
            else
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.DeviceId descending
                           select devi).ToList();
            }    
        }        
    }

    protected override async Task OnInitializedAsync()
    {
        _bandHidden = true;
        Countries = B_Country.ListOfCountries();
        Clean();
    }

    private bool CheckInputs()
    {
        if( (AliasToSearch == null) && (DeviceIdToSearch == null) && (YearToSearch == 0) && ( CountryToSearch ==null) )
        {
            return true;
        }
        else
        {
            return false;
        }
    }


    private async Task Download()
    {
        using( var memoryStream= new MemoryStream())
        {
            using( var writter = new StreamWriter(memoryStream))
            {
                var config = new CsvConfiguration(CultureInfo.InvariantCulture)
                {
                    NewLine = Environment.NewLine,
                };

                using(var csv = new CsvWriter(writter,config))
                {
                    var arr1 = Devices.ToArray();
                    csv.WriteRecords(arr1);
                }
                var arr = memoryStream.ToArray();
                await  Js.SaveAs("DevicesConsult.csv", arr);
            }
        }
    }

    private void Search()
    {
        _bandHidden = true;
        try
        {
            bool ValidInputs = CheckInputs();
            if (!ValidInputs)
            {
                Devices = B_Device.GetDevicesByConsult(DeviceIdToSearch, AliasToSearch, YearToSearch, CountryToSearch);
                if (Devices.Count <= 0)
                {
                    ErrorMessage = "No hay dispositivos que cumplan con los criterios de busqueda....";
                    Clean();
                }
                else
                {
                    ErrorMessage = null;
                }
            }
            else
            {
                ErrorMessage = "No hay criterios para buscar";
            }

        }
        catch (Exception f)
        {

            Clean();
            ErrorMessage = f.Message;
        }
    }

    void changeHidden()
    {
        if(_bandHidden)
        {
            this._hidden = "";
        }
        else
        {
            this._hidden = "hidden"; 
        }  
        _bandHidden=!_bandHidden;
    }

    /// <summary>
    /// Check if the date limit for the maintanance is under 15 days
    /// </summary>
    /// <param name="recommendateDate"></param>
    /// <returns></returns>
    bool checkDate(DateTime recommendateDate)
    {

        if( DateTime.Today < recommendateDate && recommendateDate < DateTime.Today.AddDays(15) )
        {
            return true;
        }else{
            return false;
        }
    }

    #endregion
}
