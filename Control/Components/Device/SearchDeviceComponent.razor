@using CsvHelper.Configuration
@using Entities;
@using Business;
@using System.IO;
@using CsvHelper;
@using System.Globalization;

@inject IJSRuntime Js;


<div>
    <div class="form-group row">
        <div class="col">
            <input type="text" @bind="DeviceIdToSearch" class="rounded form-control" placeholder="Serie" />
        </div>
        <div class="col">
            <input type="text" @bind="AliasToSearch" class="rounded form-control" placeholder="Alias de Equipo" />
        </div>
    </div>
    <div class="form-group row">
        <div class="col-6">
            <select class="rounded form-control" @bind="YearToSearch">
                <option value="">Año...</option>
                @foreach (var item in Years)
                {
                    <option value="@item">@item</option>
                }
            </select>
        </div>
        <div class="col-6">
            <select class="rounded form-control" @bind="CountryToSearch">
                <option value="">Pais...</option>
                @foreach (var item in Countries)
                {
                    <option value="@item.CountryId">@item.CountryName</option>
                }
            </select>
        </div>
    </div>
    <div class="form-group row">
        <div class="col">
            <input class="btn-outline-dark form-control" type="button" value="Buscar" @onclick="Search" />
        </div>
        <div class="col">
            <input class="btn-outline-dark form-control" type="button" value="Limpiar" @onclick="Clean" />
        </div>
        <div class="col">
            <input class="btn-outline-dark form-control" type="button" value="Exportar" @onclick="Download"/>
        </div>
    </div>
    <p class="text-center" style="color:red"> @ErrorMessage</p>
</div>

<hr />

<div>
    <table class="table table-hover table-striped table-responsive-sm ">
        <thead>
            <tr>
                <th> Numero de Serie</th>
                <th> Alias</th>
                <th> Fecha de Instalación</th>
                <th> Vendedor</th>
                <th> Cliente</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var obj in Devices)
            {
                if(obj.IsActive == false )
                {
                    <tr class="align-middle">                 
                        <td><strike> @obj.DeviceId</strike></td>
                        <td><strike> @obj.Alias</strike></td>
                        <td><strike> @obj.InstallationDate.Date.ToShortDateString()</strike></td>
                        <td><strike> @obj.SaleMan.Name</strike></td>
                        <td><strike> @obj.Client.Name</strike></td>
                        <td> <a class="btn btn-primary" href="device/view/@obj.DeviceId"> Ver </a></td>
                        <td> <a class="btn btn-secondary" href="device/update/@obj.DeviceId"> Modificar</a></td>
                        <td> <a class="btn btn-danger" href="device/delete/@obj.DeviceId"> Eliminar</a></td>
                    </tr>

                }
                else
                {
                    <tr class="align-middle">                 
                        <td> @obj.DeviceId</td>
                        <td> @obj.Alias</td>
                        <td> @obj.InstallationDate.Date.ToShortDateString()</td>
                        <td> @obj.SaleMan.Name</td>
                        <td> @obj.Client.Name</td>
                        <td> <a class="btn btn-primary" href="device/view/@obj.DeviceId"> Ver </a></td>
                        <td> <a class="btn btn-secondary" href="device/update/@obj.DeviceId"> Modificar</a></td>
                        <td> <a class="btn btn-danger" href="device/delete/@obj.DeviceId"> Eliminar</a></td>
                    </tr>
                }
            
            }
        </tbody>
    </table>
</div>



@code {
    #region Public Parametres


    #endregion

    #region Internal Parametres
    /// Seach Variables

    public string CountryToSearch { get; set; }

    public int YearToSearch { get; set; }

    public string AliasToSearch { get; set; }

    public string DeviceIdToSearch { get; set; }

    public string ErrorMessage { get; set; }


    /// Internal Variables
    List<int> Years = B_Device.ListOfYears();
    List<DeviceEntity> Devices = new List<DeviceEntity>();
    List<CountryEntity> Countries = new List<CountryEntity>();

    #endregion

    #region Methods

    private void Clean()
    {
        CountryToSearch = null;
        YearToSearch = 0;
        AliasToSearch = null;
        DeviceIdToSearch = null;
    }

    protected override async Task OnInitializedAsync()
    {
        Countries = B_Country.ListOfCountries();
        Clean();
    }

    private bool CheckInputs()
    {
        if( (AliasToSearch == null) && (DeviceIdToSearch == null) && (YearToSearch == 0) && ( CountryToSearch ==null) )
        {
            return true;
        }
        else
        {
            return false;
        }
    }


    private void Download()
    {
        using( var memoryStream= new MemoryStream())
        {
            using( var writter = new StreamWriter(memoryStream))
            {
                var config = new CsvConfiguration(CultureInfo.InvariantCulture)
                {
                    NewLine = Environment.NewLine,
                };
                
                using(var csv = new CsvWriter(writter,config))
                {
                    var arr1 = Devices.ToArray();
                    csv.WriteRecords(arr1);
                }
                var arr = memoryStream.ToArray();
                Js.SaveAs("DevicesConsult.csv", arr);
            }
        }
    }

    private void Search()
    {
        try
        {
            bool ValidInputs = CheckInputs();
            if (!ValidInputs)
            {
                Devices = B_Device.GetDevicesByConsult(DeviceIdToSearch, AliasToSearch, YearToSearch, CountryToSearch);
                if (Devices.Count <= 0)
                {
                    ErrorMessage = "No hay dispositivos que cumplan con los criterios de busqueda....";
                    Clean();
                }
                else
                {
                    ErrorMessage = null;
                }
            }
            else
            {
                ErrorMessage = "No hay criterios para buscar";
            }

        }
        catch (Exception f)
        {

            Clean();
            ErrorMessage = f.Message;
        }


    }

    #endregion
}
