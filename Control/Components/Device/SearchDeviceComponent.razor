@using CsvHelper.Configuration
@using Entities;
@using Business;
@using System.IO;
@using CsvHelper;
@using System.Globalization;
@using System;

@using DocumentFormat.OpenXml;
@using DocumentFormat.OpenXml.Packaging;
@using DocumentFormat.OpenXml.Spreadsheet;
@using X14 = DocumentFormat.OpenXml.Office2010.Excel;
@using X15 = DocumentFormat.OpenXml.Office2013.Excel;

@inject IJSRuntime Js;
@inject IToastService toastService

<div>
    <div class="form-group row">
        <div class="col">
            <input type="text" @bind="DeviceIdToSearch" class="rounded form-control" placeholder="Serie" />
        </div>
        <div class="col">
            <input type="text" @bind="AliasToSearch" class="rounded form-control" placeholder="Alias de Equipo" />
        </div>
    </div>
    <div class="form-group row">
        <div class="col-6">
            <select class="rounded form-control" @bind="YearToSearch">
                <option value="">Año...</option>
                @foreach (var item in Years)
                {
                    <option value="@item">@item</option>
                }
            </select>
        </div>
        <div class="col-6">
            <select class="rounded form-control" @bind="CountryToSearch">
                <option value="">Pais...</option>
                @foreach (var item in Countries)
                {
                    <option value="@item.CountryId">@item.CountryName</option>
                }
            </select>
        </div>
    </div>
    <div class="form-group row">
        <div class="col">
            <input class="btn-outline-dark form-control" type="button" value="Buscar" @onclick="Search" />
        </div>
        <div class="col">
            <input class="btn-outline-dark form-control" type="button" value="Limpiar" @onclick="Clean" />
        </div>
        <AuthorizeView Roles="Administrador,Editor">
            <Authorized >
                <div class="col">
                    <input class="btn-outline-dark form-control" type="button" value="Exportar" @onclick="Download"/>
                </div>
            </Authorized>
        </AuthorizeView>
        
        <div class="col-1" >
            <button  @onclick="changeHidden" class="btn btn-outline-light border-info">
                <span class="oi oi-info" aria-hidden="true"  ></span> 
            </button>            
        </div>
    </div>
    <p class="text-center" style="color:red"> @ErrorMessage</p>
</div>

<hr />


<div  hidden="@_bandHidden" class="flex-column">
    <p>Los equipos poseen las siguientes clasificaciones:</p>
    <div>
            <label >
                <strike>Inactivo</strike>
            </label>
      
            <label style="color:red;">
                <strike>Reemplazado</strike>
            </label>
     
            <label style="color:orange;">
                Fecha Limite Mantenimiento cercana
            </label>             
    </div>
    
    
    
</div>

<div>
            <Animate Animation="Animations.FadeLeft" Duration="TimeSpan.FromSeconds(0.1)" Delay="TimeSpan.FromSeconds(0)">
    <table class="table table-borderless table-hover table-striped table-responsive-sm ">
        <thead>
            <tr>
                <th @onclick="handleIdOrder" > Numero de Serie </th>
                <th @onclick="handleAliasOrder"   > Alias</th>
                <th @onclick="handleDateOrder"  > Fecha de Instalación</th>
                <th @onclick="handleSaleOrder"  > Vendedor</th>
                <th @onclick="handleClientOrder"> Cliente</th>
                <th></th>
                <th></th>
                <th></th>
            </tr>
        </thead>

        <tbody>
            
            @foreach (var obj in Devices)
            {
                <tr class="align-middle">   
                @if(obj.IsActive == false && obj.IsReplaced == true )
                {
                        <td style="color:red;" ><strike> @obj.DeviceId</strike></td>
                        <td style="color:red;"><strike> @obj.Alias</strike></td>
                        <td style="color:red;"><strike> @obj.InstallationDate.Date.ToShortDateString()</strike></td>
                        <td style="color:red;"><strike> @obj.SaleMan.Name</strike></td>
                        <td style="color:red;"><strike> @obj.Client.Name</strike></td>


                }
                else if(obj.IsActive == false && obj.IsReplaced != true )
                {
                    
                    <td><strike> @obj.DeviceId</strike></td>
                    <td><strike> @obj.Alias</strike></td>
                    <td><strike> @obj.InstallationDate.Date.ToShortDateString()</strike></td>
                    <td><strike> @obj.SaleMan.Name</strike></td>
                    <td><strike> @obj.Client.Name</strike></td>
                }
                else if( checkDate(@obj.RecomendedDateOfMaintenance) )
                {
                    <td style="color:orange;"> @obj.DeviceId</td>
                    <td style="color:orange;"> @obj.Alias</td>
                    <td style="color:orange;"> @obj.InstallationDate.Date.ToShortDateString()</td>
                    <td style="color:orange;"> @obj.SaleMan.Name</td>
                    <td style="color:orange;"> @obj.Client.Name</td>
                }
                else 
                {                                  
                    <td  > @obj.DeviceId</td>
                    <td > @obj.Alias</td>
                    <td > @obj.InstallationDate.Date.ToShortDateString()</td>
                    <td > @obj.SaleMan.Name</td>
                    <td > @obj.Client.Name</td>
                }  
                <td> <a class="btn btn-primary" href="device/view/@obj.DeviceId"> Ver </a></td>
                <td> <a class="btn btn-secondary" href="device/update/@obj.DeviceId"> Modificar</a></td>
                <td> <a class="btn btn-danger" href="device/delete/@obj.DeviceId"> Eliminar</a></td>
                </tr>
            }
        
        </tbody>
        
    </table>
    </Animate>
</div>






@code {
    #region Public Parametres


    #endregion

    #region Internal Parametres
    /// Seach Variables

    public string CountryToSearch { get; set; }

    public int YearToSearch { get; set; }

    public string AliasToSearch { get; set; }

    public string DeviceIdToSearch { get; set; }

    public string ErrorMessage { get; set; }

    public bool flagOrder = false;

    /// Internal Variables
    bool _bandHidden = true;

    List<int> Years = B_Device.ListOfYears();
    List<DeviceEntity> Devices = new List<DeviceEntity>();
    List<CountryEntity> Countries = new List<CountryEntity>();

    #endregion

    #region Methods

    private void Clean()
    {
        CountryToSearch = null;
        YearToSearch = 0;
        AliasToSearch = null;
        DeviceIdToSearch = null;
        _bandHidden = true;
    }


    private void handleClientOrder()
    {
        if(Devices.Count!= 0)
        {
            if (flagOrder)
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.Client.Name ascending
                           select devi).ToList();
            }
            else
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.Client.Name descending
                           select devi).ToList();
            }    
        }          
    }
    private void handleSaleOrder()
    {
        if(Devices.Count!= 0)
        {
            if (flagOrder)
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.SaleMan.Name ascending
                           select devi).ToList();
            }
            else
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.SaleMan.Name descending
                           select devi).ToList();
            }    
        }          
    }

    private void handleAliasOrder()
    {
        if(Devices.Count!= 0)
        {
            if (flagOrder)
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.Alias ascending
                           select devi).ToList();
            }
            else
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.Alias descending
                           select devi).ToList();
            }    
        }        
    }


    private void handleDateOrder()
    {
        if(Devices.Count!= 0)
        {
            if (flagOrder)
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.InstallationDate ascending
                           select devi).ToList();
            }
            else
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.InstallationDate descending
                           select devi).ToList();
            }    
        }               
    }
    private void handleIdOrder()
    {
        if(Devices.Count!= 0)
        {
            if (flagOrder)
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.DeviceId ascending
                           select devi).ToList();
            }
            else
            {
                flagOrder = !flagOrder;
                Devices = (from devi
                           in Devices
                           orderby devi.DeviceId descending
                           select devi).ToList();
            }    
        }        
    }

    protected override async Task OnInitializedAsync()
    {
        _bandHidden = true;
        Countries = B_Country.ListOfCountries();
        Clean();
    }

    private bool CheckInputs()
    {
        if( (AliasToSearch == null) && (DeviceIdToSearch == null) && (YearToSearch == 0) && ( CountryToSearch ==null) )
        {
            return true;
        }
        else
        {
            return false;
        }
    }


    private async Task Download()
    {
        using( var memoryStream= new MemoryStream())
        {
            var package = SpreadsheetDocument.Create(memoryStream, SpreadsheetDocumentType.Workbook);
            CreatePartsForExcel(package, Devices);
            package.Close();
            Js.SaveAs($"Resultados de Busqueda - Equipos - {DateTime.Now}.xlsx", memoryStream.ToArray());
        }
    }

    private void Search()
    {
        _bandHidden = true;
        try
        {
            bool ValidInputs = CheckInputs();
            if (!ValidInputs)
            {
                Devices = B_Device.GetDevicesByConsult(DeviceIdToSearch, AliasToSearch, YearToSearch, CountryToSearch);
                if (Devices.Count <= 0)
                {
                    toastService.ShowError("No hay coincidencias con el parametro de busqueda", "Error");                   
                    Clean();
                }
                else
                {
                    ErrorMessage = null;
                }
            }
            else
            {
                toastService.ShowError("No hay información para buscar", "Error");
           
            }

        }
        catch (Exception f)
        {

            Clean();
            ErrorMessage = f.Message;
        }
    }

    void changeHidden()
    {        
        _bandHidden=!_bandHidden;
    }

    /// <summary>
    /// Check if the date limit for the maintanance is under 15 days
    /// </summary>
    /// <param name="recommendateDate"></param>
    /// <returns></returns>
    bool checkDate(DateTime recommendateDate)
    {

        if( DateTime.Today < recommendateDate && recommendateDate < DateTime.Today.AddDays(15) )
        {
            return true;
        }else{
            return false;
        }
    }

    #endregion


    #region excel methods
    public void CreateExcelFile(List<DeviceEntity> data, string OutPutFileDirectory)
    {
        var datetime = DateTime.Now.ToString().Replace("/", "_").Replace(":", "_");

        string fileFullname = Path.Combine(OutPutFileDirectory, "Output.xlsx");

        if (File.Exists(fileFullname))
        {
            fileFullname = Path.Combine(OutPutFileDirectory, "Output_" + datetime + ".xlsx");
        }

        using (SpreadsheetDocument package = SpreadsheetDocument.Create(fileFullname, SpreadsheetDocumentType.Workbook))
        {
            CreatePartsForExcel(package, data);
        }
    }


    public void CreatePartsForExcel(SpreadsheetDocument document, List<DeviceEntity> data)
    {
        SheetData partSheetData = GenerateSheetdataForDetails(data);

        WorkbookPart workbookPart1 = document.AddWorkbookPart();
        GenerateWorkbookPartContent(workbookPart1);

        WorkbookStylesPart workbookStylesPart1 = workbookPart1.AddNewPart<WorkbookStylesPart>("rId3");
        GenerateWorkbookStylesPartContent(workbookStylesPart1);

        WorksheetPart worksheetPart1 = workbookPart1.AddNewPart<WorksheetPart>("rId1");
        GenerateWorksheetPartContent(worksheetPart1, partSheetData);
    }
    public void GenerateWorkbookPartContent(WorkbookPart workbookPart1)
    {
        Workbook workbook1 = new Workbook();
        Sheets sheets1 = new Sheets();
        Sheet sheet1 = new Sheet() { Name = "Sheet1", SheetId = (UInt32Value)1U, Id = "rId1" };
        sheets1.Append(sheet1);
        workbook1.Append(sheets1);
        workbookPart1.Workbook = workbook1;
    }

    public void GenerateWorksheetPartContent(WorksheetPart worksheetPart1, SheetData sheetData1)
    {
        Worksheet worksheet1 = new Worksheet() { MCAttributes = new MarkupCompatibilityAttributes() { Ignorable = "x14ac" } };
        worksheet1.AddNamespaceDeclaration("r", "http://schemas.openxmlformats.org/officeDocument/2006/relationships");
        worksheet1.AddNamespaceDeclaration("mc", "http://schemas.openxmlformats.org/markup-compatibility/2006");
        worksheet1.AddNamespaceDeclaration("x14ac", "http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac");
        SheetDimension sheetDimension1 = new SheetDimension() { Reference = "A1" };

        SheetViews sheetViews1 = new SheetViews();

        SheetView sheetView1 = new SheetView() { TabSelected = true, WorkbookViewId = (UInt32Value)0U };
        Selection selection1 = new Selection() { ActiveCell = "A1", SequenceOfReferences = new ListValue<StringValue>() { InnerText = "A1" } };

        sheetView1.Append(selection1);

        sheetViews1.Append(sheetView1);
        SheetFormatProperties sheetFormatProperties1 = new SheetFormatProperties() { DefaultRowHeight = 15D, DyDescent = 0.25D };

        PageMargins pageMargins1 = new PageMargins() { Left = 0.7D, Right = 0.7D, Top = 0.75D, Bottom = 0.75D, Header = 0.3D, Footer = 0.3D };
        worksheet1.Append(sheetDimension1);
        worksheet1.Append(sheetViews1);
        worksheet1.Append(sheetFormatProperties1);
        worksheet1.Append(sheetData1);
        worksheet1.Append(pageMargins1);
        worksheetPart1.Worksheet = worksheet1;
    }
    public void GenerateWorkbookStylesPartContent(WorkbookStylesPart workbookStylesPart1)
    {
        Stylesheet stylesheet1 = new Stylesheet() { MCAttributes = new MarkupCompatibilityAttributes() { Ignorable = "x14ac" } };
        stylesheet1.AddNamespaceDeclaration("mc", "http://schemas.openxmlformats.org/markup-compatibility/2006");
        stylesheet1.AddNamespaceDeclaration("x14ac", "http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac");

        Fonts fonts1 = new Fonts() { Count = (UInt32Value)2U, KnownFonts = true };

        Font font1 = new Font();
        FontSize fontSize1 = new FontSize() { Val = 11D };
        Color color1 = new Color() { Theme = (UInt32Value)1U };
        FontName fontName1 = new FontName() { Val = "Calibri" };
        FontFamilyNumbering fontFamilyNumbering1 = new FontFamilyNumbering() { Val = 2 };
        FontScheme fontScheme1 = new FontScheme() { Val = FontSchemeValues.Minor };

        font1.Append(fontSize1);
        font1.Append(color1);
        font1.Append(fontName1);
        font1.Append(fontFamilyNumbering1);
        font1.Append(fontScheme1);

        Font font2 = new Font();
        Bold bold1 = new Bold();
        FontSize fontSize2 = new FontSize() { Val = 11D };
        Color color2 = new Color() { Theme = (UInt32Value)1U };
        FontName fontName2 = new FontName() { Val = "Calibri" };
        FontFamilyNumbering fontFamilyNumbering2 = new FontFamilyNumbering() { Val = 2 };
        FontScheme fontScheme2 = new FontScheme() { Val = FontSchemeValues.Minor };

        font2.Append(bold1);
        font2.Append(fontSize2);
        font2.Append(color2);
        font2.Append(fontName2);
        font2.Append(fontFamilyNumbering2);
        font2.Append(fontScheme2);

        fonts1.Append(font1);
        fonts1.Append(font2);

        Fills fills1 = new Fills() { Count = (UInt32Value)2U };

        Fill fill1 = new Fill();
        PatternFill patternFill1 = new PatternFill() { PatternType = PatternValues.None };

        fill1.Append(patternFill1);

        Fill fill2 = new Fill();
        PatternFill patternFill2 = new PatternFill() { PatternType = PatternValues.Gray125 };

        fill2.Append(patternFill2);

        fills1.Append(fill1);
        fills1.Append(fill2);

        Borders borders1 = new Borders() { Count = (UInt32Value)2U };

        Border border1 = new Border();
        LeftBorder leftBorder1 = new LeftBorder();
        RightBorder rightBorder1 = new RightBorder();
        TopBorder topBorder1 = new TopBorder();
        BottomBorder bottomBorder1 = new BottomBorder();
        DiagonalBorder diagonalBorder1 = new DiagonalBorder();

        border1.Append(leftBorder1);
        border1.Append(rightBorder1);
        border1.Append(topBorder1);
        border1.Append(bottomBorder1);
        border1.Append(diagonalBorder1);

        Border border2 = new Border();

        LeftBorder leftBorder2 = new LeftBorder() { Style = BorderStyleValues.Thin };
        Color color3 = new Color() { Indexed = (UInt32Value)64U };

        leftBorder2.Append(color3);

        RightBorder rightBorder2 = new RightBorder() { Style = BorderStyleValues.Thin };
        Color color4 = new Color() { Indexed = (UInt32Value)64U };

        rightBorder2.Append(color4);

        TopBorder topBorder2 = new TopBorder() { Style = BorderStyleValues.Thin };
        Color color5 = new Color() { Indexed = (UInt32Value)64U };

        topBorder2.Append(color5);

        BottomBorder bottomBorder2 = new BottomBorder() { Style = BorderStyleValues.Thin };
        Color color6 = new Color() { Indexed = (UInt32Value)64U };

        bottomBorder2.Append(color6);
        DiagonalBorder diagonalBorder2 = new DiagonalBorder();

        border2.Append(leftBorder2);
        border2.Append(rightBorder2);
        border2.Append(topBorder2);
        border2.Append(bottomBorder2);
        border2.Append(diagonalBorder2);

        borders1.Append(border1);
        borders1.Append(border2);

        CellStyleFormats cellStyleFormats1 = new CellStyleFormats() { Count = (UInt32Value)1U };
        CellFormat cellFormat1 = new CellFormat() { NumberFormatId = (UInt32Value)0U, FontId = (UInt32Value)0U, FillId = (UInt32Value)0U, BorderId = (UInt32Value)0U };

        cellStyleFormats1.Append(cellFormat1);

        CellFormats cellFormats1 = new CellFormats() { Count = (UInt32Value)3U };
        CellFormat cellFormat2 = new CellFormat() { NumberFormatId = (UInt32Value)0U, FontId = (UInt32Value)0U, FillId = (UInt32Value)0U, BorderId = (UInt32Value)0U, FormatId = (UInt32Value)0U };
        CellFormat cellFormat3 = new CellFormat() { NumberFormatId = (UInt32Value)0U, FontId = (UInt32Value)0U, FillId = (UInt32Value)0U, BorderId = (UInt32Value)1U, FormatId = (UInt32Value)0U, ApplyBorder = true };
        CellFormat cellFormat4 = new CellFormat() { NumberFormatId = (UInt32Value)0U, FontId = (UInt32Value)1U, FillId = (UInt32Value)0U, BorderId = (UInt32Value)1U, FormatId = (UInt32Value)0U, ApplyFont = true, ApplyBorder = true };

        cellFormats1.Append(cellFormat2);
        cellFormats1.Append(cellFormat3);
        cellFormats1.Append(cellFormat4);

        CellStyles cellStyles1 = new CellStyles() { Count = (UInt32Value)1U };
        CellStyle cellStyle1 = new CellStyle() { Name = "Normal", FormatId = (UInt32Value)0U, BuiltinId = (UInt32Value)0U };

        cellStyles1.Append(cellStyle1);
        DifferentialFormats differentialFormats1 = new DifferentialFormats() { Count = (UInt32Value)0U };
        TableStyles tableStyles1 = new TableStyles() { Count = (UInt32Value)0U, DefaultTableStyle = "TableStyleMedium2", DefaultPivotStyle = "PivotStyleLight16" };

        StylesheetExtensionList stylesheetExtensionList1 = new StylesheetExtensionList();

        StylesheetExtension stylesheetExtension1 = new StylesheetExtension() { Uri = "{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}" };
        stylesheetExtension1.AddNamespaceDeclaration("x14", "http://schemas.microsoft.com/office/spreadsheetml/2009/9/main");
        X14.SlicerStyles slicerStyles1 = new X14.SlicerStyles() { DefaultSlicerStyle = "SlicerStyleLight1" };

        stylesheetExtension1.Append(slicerStyles1);

        StylesheetExtension stylesheetExtension2 = new StylesheetExtension() { Uri = "{9260A510-F301-46a8-8635-F512D64BE5F5}" };
        stylesheetExtension2.AddNamespaceDeclaration("x15", "http://schemas.microsoft.com/office/spreadsheetml/2010/11/main");
        X15.TimelineStyles timelineStyles1 = new X15.TimelineStyles() { DefaultTimelineStyle = "TimeSlicerStyleLight1" };

        stylesheetExtension2.Append(timelineStyles1);

        stylesheetExtensionList1.Append(stylesheetExtension1);
        stylesheetExtensionList1.Append(stylesheetExtension2);

        stylesheet1.Append(fonts1);
        stylesheet1.Append(fills1);
        stylesheet1.Append(borders1);
        stylesheet1.Append(cellStyleFormats1);
        stylesheet1.Append(cellFormats1);
        stylesheet1.Append(cellStyles1);
        stylesheet1.Append(differentialFormats1);
        stylesheet1.Append(tableStyles1);
        stylesheet1.Append(stylesheetExtensionList1);

        workbookStylesPart1.Stylesheet = stylesheet1;
    }

    public SheetData GenerateSheetdataForDetails(List<DeviceEntity> data)
    {
        SheetData sheetData1 = new SheetData();
        sheetData1.Append(CreateHeaderRowForExcel());

        foreach (DeviceEntity testmodel in data)
        {
            Row partsRows = GenerateRowForChildPartDetail(testmodel);
            sheetData1.Append(partsRows);
        }
        return sheetData1;
    }
    public Row CreateHeaderRowForExcel()
    {
        Row workRow = new Row();
        workRow.Append(CreateCell("Id de Cliente", 2U));
        workRow.Append(CreateCell("Alias", 2U));
        workRow.Append(CreateCell("Longitud", 2U));
        workRow.Append(CreateCell("Latitud", 2U));
        workRow.Append(CreateCell("Fecha instalación", 2U));
        workRow.Append(CreateCell("Fecha límite mantenimiento", 2U));
        workRow.Append(CreateCell("Estado equipo", 2U));
        workRow.Append(CreateCell("Reemplazos", 2U));
        workRow.Append(CreateCell("País", 2U));
        workRow.Append(CreateCell("Vendedor", 2U));
        workRow.Append(CreateCell("Cliente", 2U));

        return workRow;
    }
    public Row GenerateRowForChildPartDetail(DeviceEntity testmodel)
    {
        Row tRow = new Row();
        tRow.Append(CreateCell(testmodel.DeviceId));
        tRow.Append(CreateCell(testmodel.Alias));
        tRow.Append(CreateCell(testmodel.Longitude));
        tRow.Append(CreateCell(testmodel.Latitude));
        tRow.Append(CreateCell(testmodel.InstallationDate.ToShortDateString()));
        tRow.Append(CreateCell(testmodel.RecomendedDateOfMaintenance.ToShortDateString()));
        if (testmodel.IsActive){
            tRow.Append(CreateCell("Esta Activo"));
        }else{
            tRow.Append(CreateCell("Esta inactivo"));
        }
        if (testmodel.IsReplaced)
        {
            tRow.Append(CreateCell("Dispositivo Reemplazado"));
        }
        else
        {
            tRow.Append(CreateCell("Sin reemplazos"));
        }
        tRow.Append(CreateCell(testmodel.CountryId));
        tRow.Append(CreateCell(testmodel.Client.Name));
        tRow.Append(CreateCell(testmodel.SaleMan.Name));

        return tRow;
    }
    public Cell CreateCell(string text)
    {
        Cell cell = new Cell();
        cell.StyleIndex = 1U;
        cell.DataType = ResolveCellDataTypeOnValue(text);
        cell.CellValue = new CellValue(text);
        return cell;
    }
    public Cell CreateCell(string text, uint styleIndex)
    {
        Cell cell = new Cell();
        cell.StyleIndex = styleIndex;
        cell.DataType = ResolveCellDataTypeOnValue(text);
        cell.CellValue = new CellValue(text);
        return cell;
    }
    public EnumValue<CellValues> ResolveCellDataTypeOnValue(string text)
    {
        int intVal;
        double doubleVal;
        if (int.TryParse(text, out intVal) || double.TryParse(text, out doubleVal))
        {
            return CellValues.Number;
        }
        else
        {
            return CellValues.String;
        }
    }
    #endregion
}
