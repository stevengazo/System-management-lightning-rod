@using CsvHelper.Configuration
@using Entities;
@using Business;
@using System.IO;
@using CsvHelper;
@using System.Globalization;

@inject IJSRuntime Js;




<div class="form-group row">
    <div class="col">
        <label class="col-form-label"> Año a Seleccionar:</label>
        <select class="rounded form-control" @onchange="Year">
            <option value="0">Selecione un valor...</option>
            @foreach (var item in listYear)
            {
                <option value="@item">@item</option>
            }
        </select>
    </div>
    <div class="col">   
        <label class="col-form-label"> Exportar a .csv:</label>
        <input type="button" value="Generar" class="btn btn-outline-dark form-control" @onclick="Download"
        />    
    </div>

</div>



<div>
    <table class="table table-responsive-sm table-bordered table-hover table-light">
        <thead>
            <tr>
                <td> Número de Serie</td>
                <td> Alias</td>
                <td> Fecha Limite</td>
                <td></td>
                <td></td>
            </tr>
        </thead>
        <tbody>
            @foreach (var i in Devices)
            {
                <tr>
                    <td>@i.DeviceId  </td>
                    <td>@i.Alias</td>
                    @if(@i.RecomendedDateOfMaintenance < DateTime.Today)
                    {
                        <td class="text-danger font-weight-bold">@i.RecomendedDateOfMaintenance.ToShortDateString()</td>    
                    }   
                    else{
                        <td>@i.RecomendedDateOfMaintenance.ToShortDateString()</td>    
                    }
                    <td> <a href="device/view/@i.DeviceId"> Ver </a></td>
                    <td> <a href="device/update/@i.DeviceId"> Modificar</a></td>
                </tr>

            }
        </tbody>
    </table>
</div>




@code {

    List<DeviceEntity> Devices = new List<DeviceEntity>();
    List<int> listYear = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        listYear = B_Maintenance.ListOfYears();
    }
    private void Year(ChangeEventArgs e)
    {
        int.TryParse(e.Value.ToString(), out int Year);
        var aux = B_Maintenance.GetDevicesWithoutMaintenancesByYear(Year.ToString());
        Devices = aux;
    }
    

    private async Task Download()
    {
        using( var memoryStream= new MemoryStream())
        {
            using( var writter = new StreamWriter(memoryStream))
            {
                var config = new CsvConfiguration(CultureInfo.InvariantCulture)
                {
                    NewLine = Environment.NewLine,
                };
                
                using(var csv = new CsvWriter(writter,config))
                {
                    var arr1 = Devices.ToArray();
                    csv.WriteRecords(arr1);
                }
                var arr = memoryStream.ToArray();
               await Js.SaveAs("DevicesConsult.csv", arr);
            }
        }
    }


}
