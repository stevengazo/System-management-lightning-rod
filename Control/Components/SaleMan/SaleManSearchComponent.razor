@using Entities;
@using Business;


 
<div class="form-group row">
    <div class="col">
        <input class="rounded form-control" type="text" @bind="IDToSearch" placeholder="Id de Referencia"/>
    </div>
    <div class="col">
        <input class="rounded form-control" type="text" @bind="NameToSearch" placeholder="Nombre" />
    </div>
</div>
<div class="row">
    <div class="col">
        <input type="button" class="btn btn-outline-dark form-control" value="Buscar" @onclick="SeachSaleman" />
    </div>
    <div class="col">
        <input type="button" class="btn btn-outline-dark form-control" value="Limpiar" @onclick="CleanValues" />
    </div>
    <p class="text-center" style="color:red"> @ErrorMessage</p>
</div>

<table class="table table-hover table-striped table-responsive-sm ">
    <thead>
        <tr>
            <th> Referencia </th>
            <th> Nombre </th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var obj in SaleMans)
        {
            <tr>
                <td> @obj.SaleManId</td>
                <td> @obj.Name</td>
                <td> <a target="_blank" class="btn btn-primary" href="saleman/view/@obj.SaleManId.ToString()"> Ver </a></td>
                <td> <a target="_blank" class="btn btn-secondary" href="saleman/update/@obj.SaleManId.ToString()"> Modificar</a></td>
                <td> <a class="btn btn-danger" href="saleman/delete/@obj.SaleManId.ToString()"> Eliminar</a></td>
            </tr>
        }
    </tbody>
</table>



@code{
    List<SaleManEntity> SaleMans = new List<SaleManEntity>();

    string IDToSearch = null;
    string NameToSearch = null;
    string ErrorMessage = null;
    private void  SeachSaleman()
    {
        try
        {

            SaleMans = B_SaleMan.SearchSaleman(IDToSearch, NameToSearch);
            if (SaleMans.Count <= 0)
            {
                ErrorMessage = "No hay coincidencias";
            }
            else
            {
                ErrorMessage = "";
            }
        }
        catch (Exception f)
        {
            ErrorMessage = f.Message;
        }
    }

    private async Task CleanValues()
    {
        IDToSearch =  null;
        NameToSearch = null;
    }

}