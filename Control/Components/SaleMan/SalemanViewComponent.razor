@using System.IO;
@using System.Globalization;
@using Entities;
@using Business;
@using CsvHelper;
@using CsvHelper.Configuration;

@using Microsoft.AspNetCore.Identity;


@inject IJSRuntime Js;
@inject NavigationManager Nav;
@inject AuthenticationStateProvider auth;



@this.user.Identity.Name





<EditForm Model="oSaleMan">
    <table class="table">
        <tbody>
            <tr>
                <td>Id de referencia: </td> <td>@oSaleMan.SaleManId</td>
            </tr>
            <tr>
                <td>Nombre del vendedor:</td> <td>@oSaleMan.Name</td>
            </tr>
        </tbody>
    </table>
</EditForm>




<AuthorizeView Roles="Administrador,Editor">
    <Authorized >
       <Animate Animation="Animations.FadeRight" Duration="TimeSpan.FromSeconds(0.1)" Delay="TimeSpan.FromSeconds(0)">
        <div class="d-sm-flex">
            <input class="btn-outline-dark form-control" type="button" value="Exportar Equipos" @onclick="Download" />
        </div>
    </Animate>
    </Authorized>
</AuthorizeView>



<p class="text-danger">@message</p>


@code{
    [Parameter]
    public string id { get; set; }



    string message;
    SaleManEntity oSaleMan = new SaleManEntity();
    System.Security.Claims.ClaimsPrincipal  user;
    protected override async Task OnInitializedAsync()
    {        
        try
        {
            var tnmp = await auth.GetAuthenticationStateAsync();
             this.user = tnmp.User;
            oSaleMan = B_SaleMan.SaleManById(id);       
        }
        catch(Exception f)
        {
            message = $"Error {f.Message}";
        }
    }




    private void Download()
    {
        using( var memoryStream= new MemoryStream())
        {
            List<DeviceEntity> Devices = new List<DeviceEntity>();
            Devices = B_Device.GetDevicesBySaleman(oSaleMan.SaleManId);

            using( var writter = new StreamWriter(memoryStream))
            {
                var config = new CsvConfiguration(CultureInfo.InvariantCulture)
                {
                    NewLine = Environment.NewLine,
                };

                using(var csv = new CsvWriter(writter,config))
                {
                    var arr1 = Devices.ToArray();
                    csv.WriteRecords(arr1);
                }
                var arr = memoryStream.ToArray();
                Js.SaveAs($"Devices-{oSaleMan.Name}.csv", arr);
            }
        }
    }
}